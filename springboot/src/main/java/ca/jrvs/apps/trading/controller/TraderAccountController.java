package ca.jrvs.apps.trading.controller;

import ca.jrvs.apps.trading.model.IexQuote;
import ca.jrvs.apps.trading.model.databaseEntity.TraderEntity;
import ca.jrvs.apps.trading.service.QuoteService;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.sql.Date;
import java.time.LocalDate;

@org.springframework.stereotype.Controller
@io.swagger.annotations.Api(value = "Trader" , produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
@RequestMapping("/trader") /*Root path the controller (optional) e.g., http://localhost:8080/quote*/
public class TraderAccountController {

    private TraderAccountService service;

    @org.springframework.beans.factory.annotation.Autowired
    public TraderAccountController(TraderAccountService service) {this.service =service;}

    @ApiOperation(value = "Create trader and an account", notes = "traderId and accountId are auto generated by database, they should be mostly the same")
    @GetMapping(path = "/firstname/{firstname}/lastname/{lastname}/dob/{dob}/country/{country}/email/{email}", produces = {MediaType.APPLICATION_JSON_UTF8_VALUE})
    @ResponseStatus(HttpStatus.CREATED) @ResponseBody
    public IexQuote getQuote(@PathVariable String firstname, @PathVariable String lastname,
                             @PathVariable @DateTimeFormat(pattern = "yyyy-mm-dd") LocalDate dob, @PathVariable String country, @PathVariable String email) {
        try {
            TraderEntity savedTraderEntity = new TraderEntity();
            savedTraderEntity.setFirstName(firstname);
            savedTraderEntity.setLastName(lastname);
            savedTraderEntity.setDob(Date.valueOf(dob));
            savedTraderEntity.setCountry(country);
            savedTraderEntity.setEmail(email);
            return this.service.createTraderAndAccount(trader);
        }catch (Exception e) {
            throw ResponseExeptionUtil.getResponseStatusExecption(e);
        }
    }
}
